#!/bin/bash
# reorder-columns: A portable script to print, reorder, and delimit columns.
#
# This script reads from standard input, splits each line into columns,
# and prints the specified columns in the desired order.
# It supports custom input and output delimiters, and now, string insertion.
#
# --- Compatibility ---
# This script uses `getopts`, the POSIX standard shell builtin for parsing
# options, which guarantees it works on macOS, Linux, and other UNIX-like systems.

# Function to display the most concise usage line.
usage() {
    echo "Usage: $0 [-i input_delimiter] [-o output_delimiter] [-h|-H] col1[,col2,...]"
}

# Function to display brief usage information, including options summary.
short_usage() {
    usage >&2 # Send brief usage to stderr
    cat << 'EOF' >&2
A portable script to print, reorder, and delimit columns.

Options:
  -i <input_delimiter> The input field separator (default: any whitespace).
  -o <output_delimiter> The output field separator (default: a tab character).
  -h                   Display this help message.
  -H                   Display detailed usage and examples.

Argument:
  <columns>            A comma-separated list of column numbers or string literals to print (e.g., '2,1,str:Hello,4'). This is required.
EOF
}

# Function to display full usage information and examples.
full_usage() {
    usage # Call the concise usage line first
    cat << EOF

reorder-columns: A versatile command-line tool for text column manipulation.
This script reads text from standard input (stdin), processes it line by line,
and prints columns in a specified order to standard output (stdout).

Key Features:
  - **Column Selection:** Columns are referenced from the order they appear in the input data (1-indexed).
  - **Column Reordering:** Columns are arranged in any desired sequence, including repetitions.
  - **Custom Delimiters:** Output field separators can be different from the input.
  - **String Insertion:** Insert literal strings into the output as if they were columns by
    prefixing them with 'str:' (e.g., 'str:MyCustomString'). This is useful for adding metadata
    like filenames.
  - **Portability:** Built using POSIX shell features and standard 'awk', ensuring compatibility
    across macOS, Linux, and other UNIX-like systems.

Options:
  -i <input_delimiter>
                       Sets the input field separator. If not provided, 'awk' defaults
                       to any sequence of whitespace characters (spaces, tabs, newlines).
                       For example, use '-i ","' for CSV files, or '-i "\t"' for TSV.
  -o <output_delimiter>
                       Sets the output field separator. If not provided, the default is
                       a single tab character. This separator is placed between output columns.
  -h                   Displays a brief usage message.
  -H                   Displays this extended usage message with detailed examples.

Argument:
  <columns>            A comma-separated list of column specifications to print. This argument is
                       mandatory and must be the last non-option argument.
                       Each specification can be:
                       - A column number (e.g., '2', '1').
                       - A string literal, prefixed with 'str:' (e.g., 'str:Hello World', 'str:filename.json').
                         The 'str:' prefix indicates that the following text should be printed literally.

                       Examples: '2' (prints only the second column),
                       '2,1' (swaps the first and second columns),
                       '1,1,2' (prints the first column twice, then the second).
                       '1,str:SEPARATOR,2' (prints col 1, then the literal string "SEPARATOR", then col 2).

Examples:
1. Print only the second column from 'data.txt' (whitespace-separated):
   cat data.txt | $0 2

2. Swap the first and second columns from 'data.txt':
   cat data.txt | $0 2,1

3. Print the first column, then the second column twice, from 'data.txt':
   cat data.txt | $0 1,2,2

4. Process a CSV file named 'data.csv', selecting the first and third columns:
   cat data.csv | $0 -i "," 1,3

5. Process a CSV file, then output the first and third columns separated by a pipe character:
   cat data.csv | $0 -i "," -o "|" 1,3

6. Combine with 'jq' to extract and reorder JSON keys, inserting the filename:
   # Assuming 'jq' output is newline-separated strings. Remember to quote "str:$f"
   # to ensure shell variables are expanded correctly if filenames contain spaces.
   for f in *.json; do
     echo "Processing: $f" # Optional: show current file being processed
     cat "$f" | jq '._embedded.item[] | keys' | sort | uniq -c | sort | $0 "str:$f",2,1
   done

This script is a flexible tool for your command-line arsenal.
EOF
}

# Initialize variables for our optional arguments.
INPUT_DELIMITER_ARG=""
OUTPUT_DELIMITER_ARG=""

# Use the `getopts` shell builtin to parse options.
# The leading colon in ":i:o:hH" enables silent error handling for our case statement.
# `i:`, `o:` declare that these options expect an argument. `h` and `H` are simple flags.
while getopts ":i:o:hH" opt; do
  case ${opt} in
    i )
      INPUT_DELIMITER_ARG=$OPTARG
      ;;
    o )
      OUTPUT_DELIMITER_ARG=$OPTARG
      ;;
    h ) # Handle the -h option for brief help
      short_usage
      exit 0
      ;;
    H ) # Handle the -H option for full help
      full_usage
      exit 0
      ;;
    \? ) # Handle invalid options
      echo "Invalid Option: -$OPTARG" 1>&2
      short_usage # Send brief usage to stderr
      exit 1
      ;;
    : ) # Handle missing arguments for options
      echo "Invalid Option: -$OPTARG requires an argument" 1>&2
      short_usage # Send brief usage to stderr
      exit 1
      ;;
  esac
done

# Shift away the parsed options so that $1 refers to the first non-option argument.
shift $((OPTIND -1))

# The first remaining argument must be the column specification.
COLUMNS_ARG=$1

# Check if the mandatory column argument was provided.
if [ -z "$COLUMNS_ARG" ]; then
    echo "Error: You must specify which columns to print." >&2
    short_usage # Send brief usage to stderr
    exit 2 # Exit code 2 as requested
fi

# --- AWK Program Definition ---
# The core awk program, which processes the input.
# Using a here-document (<<'EOF') to define the AWK_PROGRAM makes it robust
# against shell interpretation issues with newlines and special characters.
read -r -d '' AWK_PROGRAM << 'EOF'
# BEGIN block is executed once before processing any input lines.
BEGIN {
    # Split the comma-separated column string/number list into an array.
    split(cols, col_order, ",");

    # Set the Output Field Separator (OFS). If a custom output delimiter was
    # provided via the script's -o option, use it; otherwise, default to a tab.
    if (odelim) {
        OFS=odelim;
    } else {
        OFS="\t";
    }
}

# This block is executed for each line of input.
{
    # Loop through the desired output items (column numbers or string literals).
    for (i = 1; i <= length(col_order); i++) {
        item_spec = col_order[i]; # Get the current item specification

        # Check if the item_spec is for a string literal (starts with "str:")
        if (substr(item_spec, 1, 4) == "str:") {
            # Extract the literal string by removing the "str:" prefix
            string_to_insert = substr(item_spec, 5);
            printf "%s", string_to_insert;
        } else {
            # Otherwise, assume it's a column number.
            # Convert to number to ensure awk treats it as a field index.
            col_num = item_spec + 0;
            printf "%s", $col_num;
        }

        # If it's not the last item in the sequence, print the output separator.
        if (i < length(col_order)) {
            printf OFS;
        }
    }
    # After all items for the current line are printed, print a newline.
    printf "\n";
}
EOF

# --- Script Execution ---
# Execute the awk command, passing the variables.
# The logic remains the same, but the variables are now set by getopts.
if [ -n "$INPUT_DELIMITER_ARG" ]; then
    # If a custom input delimiter was provided, use it with the -F option.
    awk -v cols="$COLUMNS_ARG" -v odelim="$OUTPUT_DELIMITER_ARG" -F"$INPUT_DELIMITER_ARG" "$AWK_PROGRAM"
else
    # If no input delimiter was provided, run awk without the -F option.
    # It will default to splitting on whitespace.
    awk -v cols="$COLUMNS_ARG" -v odelim="$OUTPUT_DELIMITER_ARG" "$AWK_PROGRAM"
fi
